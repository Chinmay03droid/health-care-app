# -*- coding: utf-8 -*-
"""Health Care Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GrRHM0xKPSPSIHBOkyp_D0xcwYXbe93t
"""

# Import all the required libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn import metrics
from sklearn.metrics import r2_score
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

# Loading the dataset
insurance = pd.read_csv('/content/insurance.csv')
insurance.head()

insurance_filled = insurance.dropna().copy()
  # This ensures a new DataFrame
insurance_filled.info()

## Task #1: Clean up the data
### Are there any missing values
### Standardize charges data types(float)
### Standardize categories in regions
### Change smoker column to boolean
### Standardize sex to just two categories

insurance_filled = insurance.dropna().copy()

insurance_filled.loc[:, 'region'] = insurance_filled['region'].str.lower()

FEMALE = 'female'
MALE = 'male'

sex_mapping = {'man': MALE, 'woman': FEMALE, 'M': MALE, 'F': FEMALE}
insurance_filled.loc[:, 'sex'] = insurance_filled['sex'].replace(sex_mapping)

insurance_filled.loc[:, 'smoker'] = (insurance_filled['smoker'] == 'yes').astype(bool)

insurance_filled.loc[:, 'charges'] = insurance_filled['charges'].str.strip('$').astype(float)

insurance_positive = insurance_filled.apply(lambda x: x.abs() if np.issubdtype(x.dtype, np.number) else x)

insurance_positive.sample(5)

# Task #2 : Scatterplots of relation between variables and charges
df = insurance_positive.copy()

plt.scatter(insurance_positive['age'], insurance_positive['charges'])
plt.xlabel('age')

plt.ylabel('charges')
plt.show()

# Task #3: Prepare the data for a model fitting.


df_new = pd.get_dummies(df, prefix='region', columns=['region'])


df_new['is_male'] = (df_new['sex'] == 'male').astype(int)
df_new = df_new.drop(columns=['sex'])

df_new = df_new.dropna()
df_new.head()

# Task#4: Fit a linear regression model for our data

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score


# Define input and output variables
x= df_new.drop(columns=['charges',])
y= df_new['charges']

# Split the data into training and testing sets.
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

#Create and train the linear regression model.
model = LinearRegression()
model.fit(x_train, y_train)

# Make predictions on the test set
y_pred = model.predict(x_test)

# Evaluate the model

r2_score = r2_score(y_test,y_pred)
r2_score

def preprocess_df(df):
    """Preprocesses the input DataFrame for model training.

    This function performs the following steps:
    1. One-hot encodes the 'region' column using pd.get_dummies.
    2. Drops the 'region_southeast' column to avoid multicollinearity.
    3. Converts the 'smoker' column to a boolean type and then to integers (1 for True, 0 for False).
    4. Creates a new 'is_male' column based on the 'sex' column and drops the original 'sex' column.

    Args:
        df: The input DataFrame to preprocess.

    Returns:
        df_new: The preprocessed DataFrame.
    """
    df_new = pd.get_dummies(df, prefix = 'region', columns = ['region'])
    df_new = df_new.drop(columns = ['region_southeast'])

    df_new['smoker'] = df_new['smoker'].map({'yes': True , 'no' : False})
    df_new['smoker'] = df_new['smoker'].astype(int)

    df_new['is_male'] = ((df_new['sex']) == 'male').astype(int)
    df_new = df_new.drop(columns = ['sex'])
    return df_new

# Fit a Random Forest regression model for our data.

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Create and train the Random Forest Regressor.

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(x_train, y_train)

# Make predictions on the test set
y_pred = model.predict(x_test)

# Evaluate the model
print("R² Score:", r2_score(y_test, y_pred))

# Fit a XGBoost Regression to our data to and comparing its score with Random Forest Regression.

from xgboost import XGBRegressor
from sklearn.metrics import r2_score

# Create the model
xgb = XGBRegressor(n_estimators=100, learning_rate=0.1, max_depth=4, random_state=42)

# Train the model
xgb.fit(x_train, y_train)

# Predict
y_pred = xgb.predict(x_test)

# Evaluate
print("R² Score:", r2_score(y_test, y_pred))

# Printing the plot of comparison of all regression models
import matplotlib.pyplot as plt
import seaborn as sns

# Example dictionary of your model scores
model_scores = {
    'Linear Regression': 0.70,
    'Random Forest': 0.82,
    'XGBoost': 0.84
}

# Plot
plt.figure(figsize=(8, 4))
sns.barplot(x=list(model_scores.keys()), y=list(model_scores.values()), palette="viridis")
plt.title("Model R² Score Comparison")
plt.ylabel("R² Score")
plt.ylim(0, 1)
plt.xticks(rotation=15)
plt.tight_layout()
plt.show()



# Print summary
print("✅ XGBoost achieved the highest accuracy with an R² score of 0.85.")